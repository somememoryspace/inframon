name: Multi-arch Build, Scan, and Push with Repository Linking

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-publish-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            go-arch: amd64
          - arch: arm64
            go-arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.5'

    - name: Build binary
      env:
        GOOS: linux
        GOARCH: ${{ matrix.go-arch }}
      run: |
        go build -o inframon-${{ matrix.arch }} ./src
        tar -czvf inframon-${{ matrix.arch }}.tar.gz inframon-${{ matrix.arch }}

    - name: Get version
      id: get_version
      run: echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_CR }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./inframon-${{ matrix.arch }}.tar.gz
        asset_name: inframon-${{ matrix.arch }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: inframon-${{ matrix.arch }}-binary
        path: inframon-${{ matrix.arch }}.tar.gz

  build-and-scan-container:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Trivy
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Build Container Image
      run: |
        docker buildx build --platform linux/${{ matrix.arch }} -t local/inframon:${{ matrix.arch }} --load .

    - name: Run Trivy vulnerability scanner
      id: trivy
      run: |
        mkdir -p scan_results
        if trivy image --exit-code 1 --severity HIGH,CRITICAL --format table --output scan_results/trivy-results-${{ matrix.arch }}.txt local/inframon:${{ matrix.arch }}; then
          echo "scan_status=passed" >> $GITHUB_OUTPUT
        else
          echo "scan_status=failed" >> $GITHUB_OUTPUT
        fi

    - name: Check scan results
      id: scan
      run: |
        if [ "${{ steps.trivy.outputs.scan_status }}" = "passed" ]; then
          echo "No HIGH or CRITICAL vulnerabilities found for ${{ matrix.arch }}"
          echo "scan_passed=true" >> $GITHUB_OUTPUT
        else
          echo "Vulnerabilities found for ${{ matrix.arch }}"
          cat scan_results/trivy-results-${{ matrix.arch }}.txt
          echo "scan_passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Generate SBOM
      run: |
        mkdir -p sbom_reports
        trivy image --format json --output sbom_reports/sbom-${{ matrix.arch }}.json local/inframon:${{ matrix.arch }}

    - name: Set job output
      id: set_output
      run: |
        echo "scan_passed_${{ matrix.arch }}=${{ steps.scan.outputs.scan_passed }}" >> $GITHUB_OUTPUT
        echo "Scan passed for ${{ matrix.arch }}: ${{ steps.scan.outputs.scan_passed }}"

    - name: Save image to tar
      if: steps.scan.outputs.scan_passed == 'true'
      run: |
        mkdir -p image_tars
        docker save local/inframon:${{ matrix.arch }} > image_tars/inframon-${{ matrix.arch }}.tar
        echo "Image saved to tar for ${{ matrix.arch }}"

    - name: Upload image tar
      if: steps.scan.outputs.scan_passed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: inframon-${{ matrix.arch }}-image
        path: image_tars/inframon-${{ matrix.arch }}.tar

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results-${{ matrix.arch }}
        path: scan_results/trivy-results-${{ matrix.arch }}.txt

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.arch }}
        path: sbom_reports/sbom-${{ matrix.arch }}.json

  push-images:
    needs: [build-and-scan-container]
    if: needs.build-and-scan-container.outputs.scan_passed_amd64 == 'true' && needs.build-and-scan-container.outputs.scan_passed_arm64 == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set lowercase repository name
      run: |
        echo "GITHUB_REPOSITORY_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Download amd64 image
      uses: actions/download-artifact@v4
      with:
        name: inframon-amd64-image
        path: image_tars

    - name: Download arm64 image
      uses: actions/download-artifact@v4
      with:
        name: inframon-arm64-image
        path: image_tars

    - name: Check if artifacts exist
      id: check_artifacts
      run: |
        if [ ! -f image_tars/inframon-amd64.tar ] || [ ! -f image_tars/inframon-arm64.tar ]; then
          echo "artifacts_exist=false" >> $GITHUB_OUTPUT
          echo "Error: One or both artifacts are missing. Skip