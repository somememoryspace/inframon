name: Multi-arch Build, Scan, and Push with Repository Linking

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: ubuntu-latest
    outputs:
      scan_passed_amd64: ${{ steps.set_output.outputs.scan_passed_amd64 }}
      scan_passed_arm64: ${{ steps.set_output.outputs.scan_passed_arm64 }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Trivy
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Build Container Image
      run: |
        docker buildx build --platform linux/${{ matrix.arch }} -t local/inframon:${{ matrix.arch }} --load .

    - name: Run Trivy vulnerability scanner
      id: trivy
      run: |
        mkdir -p scan_results
        if trivy image --exit-code 1 --severity HIGH,CRITICAL --format table --output scan_results/trivy-results-${{ matrix.arch }}.txt local/inframon:${{ matrix.arch }}; then
          echo "scan_status=passed" >> $GITHUB_OUTPUT
        else
          echo "scan_status=failed" >> $GITHUB_OUTPUT
        fi

    - name: Check scan results
      id: scan
      run: |
        if [ "${{ steps.trivy.outputs.scan_status }}" = "passed" ]; then
          echo "No HIGH or CRITICAL vulnerabilities found for ${{ matrix.arch }}"
          echo "scan_passed=true" >> $GITHUB_OUTPUT
        else
          echo "Vulnerabilities found for ${{ matrix.arch }}"
          cat scan_results/trivy-results-${{ matrix.arch }}.txt
          echo "scan_passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Generate SBOM
      run: |
        mkdir -p sbom_reports
        trivy image --format json --output sbom_reports/sbom-${{ matrix.arch }}.json local/inframon:${{ matrix.arch }}

    - name: Set job output
      id: set_output
      run: |
        echo "scan_passed_${{ matrix.arch }}=${{ steps.scan.outputs.scan_passed }}" >> $GITHUB_OUTPUT
        echo "Scan passed for ${{ matrix.arch }}: ${{ steps.scan.outputs.scan_passed }}"

    - name: Save image to tar
      if: steps.scan.outputs.scan_passed == 'true'
      run: |
        mkdir -p image_tars
        docker save local/inframon:${{ matrix.arch }} > image_tars/inframon-${{ matrix.arch }}.tar
        echo "Image saved to tar for ${{ matrix.arch }}"

    - name: Upload image tar
      if: steps.scan.outputs.scan_passed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: inframon-${{ matrix.arch }}-image
        path: image_tars/inframon-${{ matrix.arch }}.tar

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results-${{ matrix.arch }}
        path: scan_results/trivy-results-${{ matrix.arch }}.txt

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.arch }}
        path: sbom_reports/sbom-${{ matrix.arch }}.json

    - name: Debug Output
      run: |
        echo "Scan passed: ${{ steps.scan.outputs.scan_passed }}"
        echo "Artifact upload condition: ${{ steps.scan.outputs.scan_passed == 'true' }}"
        ls -l image_tars || echo "image_tars directory not found"

  push-images:
    needs: build-and-scan
    if: needs.build-and-scan.outputs.scan_passed_amd64 == 'true' && needs.build-and-scan.outputs.scan_passed_arm64 == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Debug Build Outputs
      run: |
        echo "Scan passed (amd64): ${{ needs.build-and-scan.outputs.scan_passed_amd64 }}"
        echo "Scan passed (arm64): ${{ needs.build-and-scan.outputs.scan_passed_arm64 }}"

    - name: Download amd64 image
      uses: actions/download-artifact@v4
      with:
        name: inframon-amd64-image
        path: image_tars

    - name: Download arm64 image
      uses: actions/download-artifact@v4
      with:
        name: inframon-arm64-image
        path: image_tars

    - name: Check if artifacts exist
      id: check_artifacts
      run: |
        if [ ! -f image_tars/inframon-amd64.tar ] || [ ! -f image_tars/inframon-arm64.tar ]; then
          echo "artifacts_exist=false" >> $GITHUB_OUTPUT
          echo "Error: One or both artifacts are missing. Skipping push."
        else
          echo "artifacts_exist=true" >> $GITHUB_OUTPUT
        fi

    - name: Load images
      if: steps.check_artifacts.outputs.artifacts_exist == 'true'
      run: |
        docker load < image_tars/inframon-amd64.tar
        docker load < image_tars/inframon-arm64.tar

    - name: Login to GitHub Container Registry
      if: steps.check_artifacts.outputs.artifacts_exist == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push images
      if: steps.check_artifacts.outputs.artifacts_exist == 'true'
      env:
        GITHUB_REPOSITORY_LOWERCASE: ${{ lowercase(github.repository) }}
      run: |
        docker tag local/inframon:amd64 ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:amd64
        docker push ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:amd64

        docker tag local/inframon:arm64 ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:arm64
        docker push ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:arm64

        echo "Adding metadata to link package to repository"
        docker buildx imagetools create \
          -t ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:amd64 \
          --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:amd64

        docker buildx imagetools create \
          -t ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:arm64 \
          --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:arm64

    - name: Create and push multi-arch manifest
      if: steps.check_artifacts.outputs.artifacts_exist == 'true'
      env:
        GITHUB_REPOSITORY_LOWERCASE: ${{ lowercase(github.repository) }}
      run: |
        docker manifest create ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:latest \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:amd64 \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:arm64

        docker manifest annotate ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:latest \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:amd64 --os linux --arch amd64

        docker manifest annotate ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:latest \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:arm64 --os linux --arch arm64

        docker manifest push ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:latest

        echo "Adding metadata to link package to repository for latest tag"
        docker buildx imagetools create \
          -t ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:latest \
          --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}:latest