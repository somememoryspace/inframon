name: Main Branch Build Multi-Arch

on:
  push:
    branches: [ "main" ]

jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      is-dev-branch: ${{ steps.check-branch.outputs.is-dev-branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if push is from dev branch
        id: check-branch
        run: |
          if [[ "${{ github.event.ref }}" == *"dev"* ]]; then
            echo "is-dev-branch=true" >> $GITHUB_OUTPUT
          else
            echo "is-dev-branch=false" >> $GITHUB_OUTPUT
          fi

  fetch-dev-artifacts:
    needs: check-branch
    if: needs.check-branch.outputs.is-dev-branch == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest successful dev workflow run
        id: get-dev-run
        run: |
          DEV_RUN_ID=$(gh run list --workflow=build-dev-multi.yml --branch=dev --status=success --limit=1 --json databaseId --jq '.[0].databaseId')
          echo "dev-run-id=$DEV_RUN_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download dev artifacts
        run: |
          mkdir -p dev-artifacts
          gh run download ${{ steps.get-dev-run.outputs.dev-run-id }} --dir dev-artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dev artifacts for main workflow
        uses: actions/upload-artifact@v4
        with:
          name: dev-artifacts
          path: dev-artifacts

  release:
    needs: [check-branch, fetch-dev-artifacts]
    if: needs.check-branch.outputs.is-dev-branch == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dev artifacts
        uses: actions/download-artifact@v4
        with:
          name: dev-artifacts
          path: dev-artifacts

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase repository name
        run: |
          echo "GITHUB_REPOSITORY_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CR }}

      - name: Build and push production images
        run: |
          for arch in amd64 arm64; do
            docker buildx build --platform linux/$arch \
              -t ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest-$arch \
              --build-arg BINARY=dev-artifacts/inframon-linux-$arch \
              --push .
          done

      - name: Create and push production multi-arch manifest
        run: |
          docker manifest create ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest \
            ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest-amd64 \
            ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest-arm64

          docker manifest push ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Release of version v${{ github.run_number }}
          draft: false
          prerelease: false