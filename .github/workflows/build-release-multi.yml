name: Main Branch Build Multi-Arch

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  check-dev-build:
    runs-on: ubuntu-latest
    outputs:
      use-dev-artifacts: ${{ steps.check-commit.outputs.use-dev-artifacts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if PR is from latest dev commit
        id: check-commit
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            dev_sha=$(git rev-parse origin/dev)
            pr_sha=$(git rev-parse HEAD^2)
            if [ "$dev_sha" == "$pr_sha" ]; then
              echo "use-dev-artifacts=true" >> $GITHUB_OUTPUT
            else
              echo "use-dev-artifacts=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "use-dev-artifacts=false" >> $GITHUB_OUTPUT
          fi

  retrieve-dev-artifacts:
    needs: check-dev-build
    if: needs.check-dev-build.outputs.use-dev-artifacts == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download dev artifacts
        uses: actions/download-artifact@v4
        with:
          name: dev-artifacts
          path: dev-artifacts

      - name: Upload dev artifacts for main workflow
        uses: actions/upload-artifact@v4
        with:
          name: main-artifacts
          path: dev-artifacts

  full-build-process:
    needs: check-dev-build
    if: needs.check-dev-build.outputs.use-dev-artifacts == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.5

      - name: Build Go binaries
        run: |
          for arch in amd64 arm64; do
            GOOS=linux GOARCH=$arch go build -o inframon-linux-$arch ./src
            sha256sum inframon-linux-$arch > inframon-linux-$arch.sha256
            echo "SHA256 checksum for inframon-linux-$arch:"
            cat inframon-linux-$arch.sha256
          done

      - name: Upload binaries and checksums
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: |
            inframon-linux-*
            *.sha256

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and save Docker images
        run: |
          for arch in amd64 arm64; do
            docker buildx build --platform linux/$arch \
              -t inframon:main-$arch \
              --build-arg BINARY=inframon-linux-$arch \
              --load .
            docker save inframon:main-$arch > inframon-main-$arch.tar
          done

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: inframon-main-*.tar

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy scans
        run: |
          mkdir -p scan_results sbom_reports
          for arch in amd64 arm64; do
            docker load < inframon-main-$arch.tar
            trivy image --exit-code 0 --severity HIGH,CRITICAL --format table \
              --output scan_results/trivy-results-$arch.txt \
              inframon:main-$arch
            echo "Vulnerabilities found for $arch:"
            cat scan_results/trivy-results-$arch.txt
            trivy image --format json \
              --output sbom_reports/sbom-$arch.json \
              inframon:main-$arch
          done

      - name: Upload scan results and SBOM
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            scan_results
            sbom_reports

      - name: Upload all artifacts for main workflow
        uses: actions/upload-artifact@v4
        with:
          name: main-artifacts
          path: |
            inframon-linux-*
            *.sha256
            inframon-main-*.tar
            scan_results
            sbom_reports

  build-and-push-production-image:
    needs: [retrieve-dev-artifacts, full-build-process]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: main-artifacts

      - name: Set lowercase repository name
        run: |
          echo "GITHUB_REPOSITORY_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CR }}

      - name: Build and push production image
        run: |
          docker buildx build --platform linux/${{ matrix.arch }} \
            -t ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest-${{ matrix.arch }} \
            --build-arg BINARY=inframon-linux-${{ matrix.arch }} \
            --push .

  create-production-multiarch-manifest:
    needs: build-and-push-production-image
    runs-on: ubuntu-latest
    steps:
      - name: Set lowercase repository name
        run: |
          echo "GITHUB_REPOSITORY_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CR }}

      - name: Create and push production multi-arch manifest
        run: |
          docker manifest create ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest \
            ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest-amd64 \
            ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest-arm64

          docker manifest push ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}/inframon:latest

  create-release:
    needs: create-production-multiarch-manifest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Release of version v${{ github.run_number }}
          draft: false
          prerelease: false