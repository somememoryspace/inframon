name: Main Branch Release

on:
  pull_request:
    branches: [ "main" ]
    types: [closed]

jobs:
  check-pr-branch:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      is-valid-branch: ${{ steps.check-branch.outputs.is-valid-branch }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Check if PR is from a valid dev branch
        id: check-branch
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "Branch name: $BRANCH_NAME"
          if [[ $BRANCH_NAME =~ ^dev-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is-valid-branch=true" >> $GITHUB_OUTPUT
            echo "Valid branch detected"
          else
            echo "is-valid-branch=false" >> $GITHUB_OUTPUT
            echo "Invalid branch detected"
          fi

      - name: Extract version from branch name
        if: steps.check-branch.outputs.is-valid-branch == 'true'
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#dev-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

  fetch-dev-artifacts:
    needs: check-pr-branch
    if: needs.check-pr-branch.outputs.is-valid-branch == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest successful dev workflow run
        id: get-dev-run
        run: |
          DEV_RUN_ID=$(gh run list --repo ${{ github.repository }} --workflow=build-dev-multi.yml --branch=${{ github.event.pull_request.head.ref }} --status=success --limit=1 --json databaseId --jq '.[0].databaseId')
          echo "dev-run-id=$DEV_RUN_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download dev artifacts
        run: |
          if [ -n "${{ steps.get-dev-run.outputs.dev-run-id }}" ]; then
            gh run download ${{ steps.get-dev-run.outputs.dev-run-id }} --repo ${{ github.repository }} --dir artifacts
            echo "Dev artifacts downloaded successfully"
          else
            echo "No successful dev workflow run found. Aborting."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts for release
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

  create-release:
    needs: [check-pr-branch, fetch-dev-artifacts]
    if: needs.check-pr-branch.outputs.is-valid-branch == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts

      - name: Prepare binary paths
        run: |
          echo "LINUX_AMD64_PATH=release-artifacts/inframon-linux-amd64/inframon-linux-amd64" >> $GITHUB_ENV
          echo "LINUX_ARM64_PATH=release-artifacts/inframon-linux-arm64/inframon-linux-arm64" >> $GITHUB_ENV
          echo "DARWIN_ARM64_PATH=release-artifacts/inframon-darwin-arm64/inframon-darwin-arm64" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-pr-branch.outputs.version }}
          name: Release v${{ needs.check-pr-branch.outputs.version }}
          body: |
            Release of version ${{ needs.check-pr-branch.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ${{ env.LINUX_AMD64_PATH }}
            ${{ env.LINUX_AMD64_PATH }}.sha256
            ${{ env.LINUX_ARM64_PATH }}
            ${{ env.LINUX_ARM64_PATH }}.sha256
            ${{ env.DARWIN_ARM64_PATH }}
            ${{ env.DARWIN_ARM64_PATH }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CR }}

      - name: Push Docker images and create manifest
        run: |
          echo "Listing contents of release-artifacts directory:"
          ls -R release-artifacts

          # List available Docker images
          echo "Available Docker images before loading:"
          docker images

          # Load and push Docker images
          for arch in amd64 arm64; do
            echo "Processing $arch architecture"
            if [ -f "release-artifacts/docker-image-${arch}/inframon-dev-${arch}.tar" ]; then
              echo "Loading image for $arch"
              docker load < release-artifacts/docker-image-${arch}/inframon-dev-${arch}.tar
              echo "Tagging image for $arch"
              docker tag inframon:dev-${arch} ghcr.io/${{ github.repository_owner }}/inframon:latest-${arch}
              echo "Pushing image for $arch"
              docker push ghcr.io/${{ github.repository_owner }}/inframon:latest-${arch}
            else
              echo "Docker image tar file not found for $arch"
              echo "Contents of docker-image-${arch} directory:"
              ls -l release-artifacts/docker-image-${arch}
              exit 1
            fi
          done

          # List images after tagging
          echo "Docker images after tagging:"
          docker images

          # Verify pushed images
          for arch in amd64 arm64; do
            echo "Verifying pushed image for $arch"
            docker pull ghcr.io/${{ github.repository_owner }}/inframon:latest-${arch}
            if [ $? -ne 0 ]; then
              echo "Failed to pull image for $arch. Image may not have been pushed successfully."
              exit 1
            fi
          done

          # Create and push multi-arch manifest
          echo "Creating multi-arch manifest"
          docker manifest create ghcr.io/${{ github.repository_owner }}/inframon:latest \
            ghcr.io/${{ github.repository_owner }}/inframon:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/inframon:latest-arm64

          echo "Inspecting manifest"
          docker manifest inspect ghcr.io/${{ github.repository_owner }}/inframon:latest

          echo "Pushing multi-arch manifest"
          docker manifest push ghcr.io/${{ github.repository_owner }}/inframon:latest
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled