name: Binary Multi-arch Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  gitleaks-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Install Gitleaks
        run: |
          wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks on all commits
        run: |
          gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json
        continue-on-error: true

      - name: Check Gitleaks result
        run: |
          if [ -s gitleaks-report.json ]; then
            echo "Gitleaks has detected potential secrets in the repository history."
            echo "Please review the Gitleaks report and remove any sensitive information before proceeding."
            echo "Detected secrets:"
            cat gitleaks-report.json
            exit 1
          else
            echo "No secrets detected by Gitleaks."
          fi

      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          
  build-and-release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            goos: linux
          - os: macos-latest
            goos: darwin
        exclude:
          - os: macos-latest
            arch: amd64
    runs-on: ${{ matrix.os }}
    steps:
    - name: Display build configuration
      run: |
        echo "Building for OS: ${{ matrix.goos }}, Arch: ${{ matrix.arch }}, on ${{ matrix.os }}"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22.5

    - name: Build Go binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.arch }}
      run: |
        go build -o inframon-${{ matrix.goos }}-${{ matrix.arch }} ./src

    - name: Generate SHA256 checksum
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          sha256sum inframon-${{ matrix.goos }}-${{ matrix.arch }} > inframon-${{ matrix.goos }}-${{ matrix.arch }}.sha256
        elif [ "${{ runner.os }}" == "macOS" ]; then
          shasum -a 256 inframon-${{ matrix.goos }}-${{ matrix.arch }} > inframon-${{ matrix.goos }}-${{ matrix.arch }}.sha256
        else
          echo "Unsupported OS for SHA256 generation"
          exit 1
        fi
        echo "SHA256 checksum for inframon-${{ matrix.goos }}-${{ matrix.arch }}:"
        cat inframon-${{ matrix.goos }}-${{ matrix.arch }}.sha256

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: inframon-${{ matrix.goos }}-${{ matrix.arch }}
        path: |
          inframon-${{ matrix.goos }}-${{ matrix.arch }}
          inframon-${{ matrix.goos }}-${{ matrix.arch }}.sha256

    - name: Generate release tag
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "RELEASE_TAG=v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Release ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
        files: |
          inframon-${{ matrix.goos }}-${{ matrix.arch }}
          inframon-${{ matrix.goos }}-${{ matrix.arch }}.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GH_CR }}

    - name: Print SHA256 checksums
      run: |
        echo "SHA256 checksums for inframon binaries:"
        cat inframon-${{ matrix.goos }}-${{ matrix.arch }}.sha256